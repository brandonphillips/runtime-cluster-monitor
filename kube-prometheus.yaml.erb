alertmanager:
  config:
    <%= template 'alertmanager.yaml.erb', 4, '_alertmanager', binding %>
  templateFiles:
    alerts.tmpl: |
      <%= template 'alerts.tmpl.erb', 6, '_alerts', binding  %>
  alertmanagerSpec:
    routePrefix: /alertmanager/
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: [ReadWriteOnce]
          resources:
            requests:
              storage: 2Gi
    <%= template 'affinity.yaml.erb', 4, '_affinity', binding %>

grafana:
  grafana.ini:
    server:
      root_url: '%(protocol)s://%(domain)s/grafana/'
      serve_from_sub_path: 'true'
    auth:
      disable_login_form: 'true'
      disable_signout_menu: 'true'
    auth.basic:
      enabled: 'false'
    auth.anonymous:
      enabled: 'true'
      org_role: Admin
  persistence:
    enabled: true
    size: 10Gi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'codefresh'
          orgId: 1
          folder: Codefresh
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/codefresh
  dashboards:
    codefresh:
      build_metrics:
        json: |
          <%= file 'dashboards/Build metrics.json', 10 %>
      init_phase_duration_avg:
        json: |
          <%= file 'dashboards/Workflow init phase duration (avg).json', 10 %>
      init_phase_duration_per_build:
        json: |
          <%= file 'dashboards/Workflow init phase duration (per build).json', 10 %>
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

kube-state-metrics:
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

kubeControllerManager:
  enabled: false

coreDns:
  enabled: false

kubeDns:
  enabled: true

kubeEtcd:
  enabled: false

kubeProxy:
  enabled: false

kubeScheduler:
  enabled: false

prometheusOperator:
  logLevel: error
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

prometheus:
  prometheusSpec:
    externalUrl: https://<%= ENV['cluster'] %>/prometheus/
    routePrefix: /prometheus/
    scrapeInterval: 10s
    additionalScrapeConfigs:
      <%= template 'scrape.yaml.erb', 6, '_scrape', binding %>
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: [ReadWriteOnce]
          resources:
            requests:
              storage: 70Gi
    <%= template 'affinity.yaml.erb', 4, '_affinity', binding %>

defaultRules:
  rules:
    time: false
    kubernetesApps: false
    kubernetesResources: false
    kubernetesSystem: false

additionalPrometheusRules:
  - name: cf-rules
    groups:
      <%= template 'alerts.yaml.erb', 6, '_rules', binding %>
